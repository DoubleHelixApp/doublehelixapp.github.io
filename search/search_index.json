{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WGSE-NG","text":"<p>WGSE-NG is a tool designed for manipulating and extracting data from files representing whole-sequenced human genomes. It provides functionality to load, parse, filter, transform, and analyze genomic data. The name WGSE is an acronym that stands for \"Whole Genome Sequencing Extract\". </p> <p>WGSE-NG is an attempt to re-engineering an existing tool called WGSE. See the FAQs to see how they differs. WGSE and WGSE-NG are  heavily relying on a suite of existing tools called samtools but they provide a more user-friendly interface.</p>"},{"location":"#launch","title":"Launch","text":"<p>WGSE runs on Windows and Linux. It should work also on MacOS but was never tested on it. Follow the installation procedure below according to your OS. The only currently supported way to install <code>WGSE-NG</code> is with a pypi package. This require python and pip installed. The procedure is the same on every supported OSs. Note WGSE-NG is still in alpha state and many things are not working or they may broke unexpectedly.</p> WindowsDebian-based distros <pre><code>python -m pip install wgse-ng\nwgse\n</code></pre> <p>IMPORTANT: WGSE-NG is not thoroughly Please see the troubleshooting section. <pre><code>sudo apt install libqt6waylandclient6 samtools bcftools -y\npython -m pip install wgse-ng\nwgse\n</code></pre></p>"},{"location":"#pyinstaller-release","title":"PyInstaller release","text":"<p>There's a PyInstaller build the is occasionally executed to build a single-file binary. The artifacts are here: windows, linux. To use them, simply download the file and open it.</p> <p>Unless differently indicated, this is not a recommended way to run WGSE-NG for the time being: first of all, the build is disabled most of the time so you'll likely find an old version of WGSE-NG there. Second, it's less tested than the PyPI package. If you want to go ahead and try it anyway, see the troubleshooting section.</p>"},{"location":"#development","title":"Development","text":"<p>This section explain how to configure WGSE-NG for development.</p> <p>Note: The best experience for developing is with VS Code as this project already contains sensible settings for VS code.</p> WindowsDebian based distros <pre><code>git clone https://github.com/WGSE-NG/WGSE-NG\ncd WGSE-NG\npython -m venv .venv\n.venv\\Scripts\\activate\npython -m pip install -e .\nwgse\n</code></pre> <pre><code>sudo apt install libqt6waylandclient6 samtools bcftools -y\ngit clone https://github.com/WGSE-NG/WGSE-NG\ncd WGSE-NG\npython -m venv .venv\nsource ./.venv/bin/activate\npython -m pip install -e .\nwgse\n</code></pre>"},{"location":"#pre-commit","title":"pre-commit","text":"<p>This repository uses pre-commit to ensure linting, formatting, and isort are executed before commit. Its usage is optional but highly recommended. To install: <pre><code>python -m pip install pre-commit\npre-commit install\n</code></pre></p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"Error Description Symbol lookup error after launching WGSE from command line on Linux/WSL It's likely you have an old version of Qt installed. On Debian based distro it's likely the version of <code>libqt6waylandclient6</code> or one of its dependencies is too old and the python module for Qt is trying to fetch some symbols from it that were added in a subsequent version. You can try to run a <code>sudo apt update &amp;&amp; sudo apt upgrade</code> but if that doesn't work unfortunately you need to upgrade the Qt version manually, use another distribution (or stick with the CLI once it will be available). Something else does not work on Linux/WGSE-NG is not starting on Linux WGSE-NG is tested almost exclusively on Windows for the time being. On Windows all the executables needed beside WGSE-NG are shipped with another PyPI package upon which WGSE-NG depends. Installing through <code>pip</code> is hence sufficient to get <code>wgse-ng</code> working. On Linux <code>wgse-ng</code> expects all the executables to be available under <code>PATH</code>. Consequently there are dependencies that need to be installed manually. The installation section provide the dependencies list for Debian-based distros, on other distros the command may change. Fetching existing executables from <code>PATH</code> means WGSE-NG will have no control no control over the version of the dependencies. Ubuntu on WLS is using a fairly old build of samtools for example. This means some feature (i.e., FASTA conversion) won't work. This will change in the future once WGSE-NG will stop relying on distro executables but frankly this is not a priority at the moment. You're anyway more than welcome to open an issue if something is not working correctly. Windows defender is complaining a lot when launching the pyinstaller distribution, potentially uploading the .exe to the cloud for virus scanning or straight up detecting the binary as a malware Windows defender is not very happy with unsigned executables. You can rest assured WGSE-NG do not contain any malware though. WGSE-NG is completely open-source and the way the pyinstaller build is made can be seen in these GitHub Actions: Windows, Linux. One of the long-term goal is to get a certificate and start signing the binary but this won't happen anytime soon."},{"location":"#configuration","title":"Configuration","text":"<p>WGSE utilizes two configuration files to define its operational settings. These files provide a way to customize the software's behavior without modifying the code. The files are loaded in a specific order, allowing for overrides.</p>"},{"location":"#file-priority","title":"File Priority","text":"<p>WGSE prioritizes configuration settings based on the order the files are loaded:</p> <ul> <li>Global Configuration File (configuration/main.ini): The first file loaded is located in a subdirectory of the WGSE path. This file is named wgse.ini by default. Settings defined here serve as the base configuration. This file is mostly useful when developing to have everything in the same folder.</li> <li>Local Configuration File (~/.wgse/main.ini): The second file loaded resides in the user's home directory within a folder named .wgse. Settings defined in this file can override the settings from the global configuration file.</li> </ul>"},{"location":"#configuration-file-sample","title":"Configuration file sample","text":"<pre><code>[general]\nlast_path = .\n\n[external]\nroot = 3rd_party\nthreads = 24\n\n[repository]\nrepository = repository\nmetadata = repository\\metadata\ntemporary = repository\\temp\n\n[alignment_stats]\nskip = 40000\nsamples = 20000\n</code></pre>"},{"location":"#faqs","title":"FAQs","text":"<p>Q: How does it differs from the original WGSE?</p> <p>A: WGSE-NG is a re-engineering of WGSE with these improvements:</p> <ul> <li>A new GUI (based on pyqtside)</li> <li>An entirely re-written procedure to identify reference genomes that supports more than 90 reference genomes</li> <li>A progress bar (not an easy task to implement one, see here for the technical details)</li> <li>A custom HTML export of file information</li> </ul> <p>It has also some non-visible modification:</p> <ul> <li>It has many unit-tests</li> <li>It has a completely automated crash-report</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"advanced-topics/","title":"Advanced topics","text":""},{"location":"advanced-topics/#reference-genome","title":"Reference genome","text":"<p>In some cases, WGSE-NG needs to access the reference genome that was used to create an alignment-map file. Since this information is not contained in an alignment-map file, WGSE-NG needs to guess it. This document explains how WGSE-NG solves this problem and what can go wrong.</p>"},{"location":"advanced-topics/#introduction","title":"Introduction","text":"<p>The biggest hint for identifying the reference genome is the header of an alignment-map file. The header contains a list of sequences contained in the reference used to do the alignment.</p> <p>WGSE-NG solves the issue of identifying the reference by maintaining a list of meta-information about several reference genomes. In this way, it can identify a reference if it's present in this list. The list can be modified and new references can be suggested by using this GitHub issue template or by submitting a PR using the instruction below.</p> <p>The process is not perfect and it can potentially give incorrect information (see the section below to understand how it works). In this case, some actions may fail. Please feel free to open a bug report if that happens.</p>"},{"location":"advanced-topics/#how-it-works","title":"How it works","text":"<p>The identification can work in two different ways, depending on the information available in the alignment-map file: </p> <ul> <li>Using MD5 of sequences </li> <li>Using lengths of sequences</li> </ul> <p>MD5 indicates an MD5 string calculated in a reliable way (that accounts for case differences inside the sequence) over the content of a sequence. The procedure to calculate the MD5 is described on page 6 of the SAM standard. An MD5 can identify unequivocally a specific sequence and it's the preferred method to find a reference. If MD5 of the reference sequences are available it's easy to find the reference looking in the meta-data list of reference genomes that WGSE-NG maintains. Lengths are used only as a fallback when MD5s are not available. Unfortunately, this situation is the most common one. Despite MD5 sequences being part of the SAM specification standard they are not mandatory. Most alignment-map files won't have this field populated.</p> <p>The lengths indicate the length of the sequences expressed in base pairs. A length itself cannot reliably identify a sequence as it's possible (and happening in practices) to have the same lengths for sequences having completely different content (and hence a different MD5). What's more reliable is to use the whole set of sequences to identify a reference. The sequence of lengths contained in a reference is pretty unique for each reference, and it's the current way used by WGSE-NG to identify a reference when the MD5 is not available. It's still possible that two references have a perfectly identical set of lengths having a different sequence of MD5s. In this case, if the alignment-map file was associated by WGSE-NG to a reference falling in this situation, WGSE-NG will present a choice to the user. Since it's impossible to reliably determine which reference was used without other information, the user has to choose which reference is the correct one.</p> <p>This is a list of ambiguous lengths sequences (will be updated at  every commit)</p> <ol> <li>https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/analysisSet/hg38.analysisSet.fa.gz</li> <li> <p>https://ftp.ncbi.nlm.nih.gov/genomes/archive/old_genbank/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz</p> </li> <li> <p>https://ftp.ensembl.org/pub/release-55/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.55.dna.toplevel.fa.gz</p> </li> <li>https://ftp.ensembl.org/pub/release-56/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.56.dna.toplevel.fa.gz</li> </ol>"},{"location":"advanced-topics/#add-a-new-reference","title":"Add a new reference","text":"<p>It's possible to onboard a new reference to WGSE-NG either by opening a GitHub issue with this template or by using the following code:</p> <pre><code>manager = RepositoryManager()\nmanager.genomes.append(\n    manager.ingest(\n        \"https://source/reference.fa\",\n        \"NIH\", # Anything that matches an entry in sources.json, otherwise add an entry there\n        \"38\",  # Only 38 or 19\n    )\n)\nGenomeMetadataLoader().save(manager.genomes)\n</code></pre> <p>A GUI/CLI way will be added in the future.</p>"},{"location":"advanced-topics/#progress-bar","title":"Progress bar","text":"<p>TBD</p>"}]}